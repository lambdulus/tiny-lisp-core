import { LexerToken } from "../lexer/LexerTokens";
import { Lexer } from "../lexer/Lexer";
import { Instruction } from "../utility/instructions/Instruction";
import { SymbTable } from "./SymbTable";
import { SECDArray } from "../utility/SECD/SECDArray";
import { InstructionShortcut } from "../utility/instructions/InstructionShortcut";
import { CompositeNode, InnerNode, TopNode } from "../AST/AST";
import { SECDElement } from "../utility/SECD/SECDElement";
export declare class Parser {
    get topNode(): TopNode | null;
    symbTable: SymbTable;
    lexer: Lexer;
    currTok: LexerToken | null;
    private _topNode;
    constructor();
    protected compare(tok: LexerToken): void;
    protected push(arr: SECDArray, val: string | number | Instruction | SECDArray): number;
    parse(input: string): SECDArray;
    protected loadInstructions(): SECDArray;
    protected topLevel(): [SECDArray, InnerNode];
    protected definition(): [SECDArray, InnerNode];
    protected expr(): SECDArray;
    protected expr_body(): SECDArray;
    protected val(): SECDArray;
    protected iden(): SECDArray;
    protected args(): string[];
    protected letBody(): [string[], SECDArray];
    protected beginBody(): SECDArray;
    protected functionCall(): SECDArray;
    protected functionArgs(): SECDArray;
    protected str(): SECDArray;
    protected num(): SECDArray;
    protected lambda(args: CompositeNode, isCall?: number): SECDArray;
    protected compileQuote(): SECDArray;
    protected compileUnaryOperator(instructionShortcut: InstructionShortcut): SECDArray;
    protected compileBinaryOperator(instructionShortcut: InstructionShortcut): SECDArray;
    protected compileBackQuote(): SECDArray;
    protected compileComma(): SECDArray;
    protected createNode(element: SECDElement): InnerNode;
}
